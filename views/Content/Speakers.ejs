<%- include('../ui/sidebar2.ejs') %>
<title>List of Speakers</title>
<script src="/socket.io/socket.io.js"></script>
<style>
  .styled-table {
    border-collapse: collapse;
    font-size: 0.9em;
    font-family: sans-serif;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
  }

  .styled-table thead tr {
    background-color: #695cfe;
    color: #ffffff;
    text-align: left;
  }

  .styled-table th,
  .styled-table td {
    padding: 20px 15px;
  }

  .styled-table tbody tr {
    border-bottom: 1px solid #dddddd;
  }

  .styled-table tbody tr:nth-of-type(even) {
    background-color: #f3f3f3;
  }

  .styled-table tbody tr:last-of-type {
    border-bottom: 5px solid #009879;
  }

  .speaker_list {
    padding: 60px 30px;
    margin-top: 10px;
    margin-bottom: -50px;
  }

  .speakerImg img {
    width: 200px;
  }
</style>

<style>
  .menu .menu_box {
    width: auto;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    gap: 15px;
  }

  .menu .menu_box .menu_card {
    width: 330px;
    height: 510px;
    padding-top: 10px;
    margin-bottom: 20px;
    background-color: white;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    border-radius: 10px;
  }

  .menu .menu_box .menu_card .menu_image {
    width: 300px;
    height: 340px;
    margin: 0 auto;
    overflow: hidden;
  }

  .menu .menu_box .menu_card .menu_image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    transition: 0.3s;
    border-radius: 10px;
  }

  .menu .menu_box .menu_card .menu_image:hover img {
    transform: scale(1.1);
  }

  .menu .menu_box .menu_card .menu_info p {
    text-align: center;
    margin-top: 8px;
    line-height: 21px;
    font-family: sans-serif;
  }

  .menu .menu_box .menu_card .menu_info h3 {
    text-align: center;
    margin-top: 10px;
    font-family: sans-serif;
  }

  .menu .menu_box .menu_card .menu_info .menu_btn {
    display: flex;
    align-items: center;
    justify-content: center;
    text-decoration: none;
    color: white;
    background: green;
    padding: 8px 10px;
    margin: 0 80px;
    transition: background-color 0.3s ease-in-out;
  }

  .menu .menu_box .menu_card .menu_info .menu_btn:hover {
    background-color: rgb(9, 204, 9);
    /* Change the background color on hover */
    user-select: none;
  }

  @media only screen and (max-width: 600px) {
    .menu .menu_box {
      width: 100%;
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      align-items: center;
      gap: 0px;
    }

    .menu .menu_box .menu_card {
      width: 300px;
      height: 510px;
      margin-bottom: 20px;
      background-color: white;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    }

    .menu .menu_box .menu_card .menu_image {
      width: 90%;
      margin: auto;
      overflow: hidden;
    }

    .menu .menu_box .menu_card .menu_image img {
      width: 100%;
      object-fit: cover;
      object-position: center;
      transition: 0.3s;
    }

    /* .menu .menu_box .menu_card .menu_info h3 {
      width: 60%;
      text-align: center;
      margin: 10px auto 10px auto;
      font-size: 25px;
    } */

    .menu .menu_box .menu_card .menu_info p {
      text-align: center;
      margin-top: 8px;
      line-height: 21px;
      font-family: sans-serif;
    }
  }
</style>
<%- include('../partials/messages.ejs')%>
<% if( user.userType == "Admin"){ %>
  <div class="col-lg-12 speaker_list">
    <div class="card card-outline card-primary">
      <div class="card-header">
        <div class="card-tools">
          <a class="btn btn-block btn-sm btn-default btn-flat border-primary" data-bs-toggle="modal" data-bs-target="#speaker_information"><i class="fa-solid fa-plus"></i> Add Speaker</a>
        </div>
      </div>
      <div class="card-body" style="overflow-y: auto;">
        <table class="table-hover styled-table table table-bordered commonTable" id="list">
          <h3 class="mb-4 control-label fw-bold text-muted" style="text-align: center">
            Speaker List
          </h3>
          <thead class="table-info">
            <tr>
              <th width="5%" class="text-center">#</th>
              <th width="25%">Name</th>
              <th>Position</th>
              <th style="text-align: center;" width="18%">Speaker Image</th>
              <th style="text-align: center;" width="17%">Action</th>
            </tr>
          </thead>
          <tbody>
            <% speaker.forEach((speaker, i) => { %>
            <tr>
              <td class="text-center">
                <b><%= i + 1 %></b>
              </td>
              <td>
                <b class="truncate">
                  <%= speaker.speakerName %>
                </b>
              </td>
              <td>
                <%= speaker.speakerPosition %>
              </td>
              <td class="text-center">
                <% if(speaker.speakerImage === null || speaker.speakerImage === ""){ %>
                <span class="speakerImg">
                  <img src="/public/speaker/DefaultProfile.jpg" alt="">
                </span>
                <% } else{  %>
                <span class="speakerImg">
                  <img src="/public/speaker/<%= speaker.speakerImage %>" alt="">
                </span>
                <% } %>
              </td>
              <td class="text-center">
                <div class="btn-group" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="View More">
                  <a class="btn btn-outline-primary view_speaker" data-bs-toggle="modal" data-bs-target="#view_more" data-id="<%= speaker._id %>">
                    <i class="fa-solid fa-eye"></i>
                  </a>
                </div>
                <div class="btn-group" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Edit">
                  <a class="btn btn-outline-success view_speaker" data-bs-toggle="modal" data-bs-target="#edit_speaker" data-id="<%= speaker._id %>">
                    <i class="fa-solid fa-pen-to-square"></i>
                  </a>
                </div>
                <div class="btn-group" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Delete">
                  <a class="btn btn-outline-danger view_speaker" data-bs-toggle="modal" data-bs-target="#delete_speaker" data-id="<%= speaker._id %>">
                    <i class="fa-solid fa-trash"></i>
                  </a>
                </div>
              </td>
            </tr>
            <% }); %>
          </tbody>
        </table>
      </div>
    </div>
  </div>
<% }else { %>
  <div class="speaker_list "></div>
<% } %>

<!-- Create Speaker Modal -->
<div class="modal fade" id="speaker_information" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">

      <div class="modal-header">
        <h5 class="modal-title" id="staticBackdropLabel">
          Speaker Information
        </h5>
        <!-- <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button> -->
      </div>
      <form action="/users/addSpeaker" method="POST" enctype="multipart/form-data">
        <div class="modal-body">

          <div class="col-lg-12 center">
            <div class="card card-outline card-primary">
              <div class="card-body">

                <div class="row">

                  <div class="col-md-6 border-right">
                    <div class="form-group">
                      <label class="control-label fw-bold">Speaker Name:</label>
                      <input type="text" name="speakerName" class="form-control form-control mb-3" placeholder="Name of the speaker" required />
                    </div>
                    <div class="form-group">
                      <label class="control-label fw-bold">Speaker Position:</label>
                      <input type="text" name="speakerPosition" class="form-control form-control mb-3" placeholder="Position of the speaker" required />
                    </div>
                    <div class="form-group">
                      <label class="control-label fw-bold">School:</label>
                      <input type="text" name="speakerSchool" class="form-control form-control mb-3" placeholder="School of the speaker" required />
                    </div>
                  </div>

                  <div class="col-md-6">
                    <div class="form-group">
                      <label class="control-label fw-bold">District:</label>
                      <input type="text" name="speakerDistrict" class="form-control form-control mb-3" placeholder="District of the speaker" required />
                    </div>
                    <div class="form-group">
                      <label class="control-label fw-bold">Field of Expertise:</label>
                      <input type="file" name="speakerBiodata" class="form-control form-control" accept="application/pdf" />
                      <span class="mb-3" style="font-size: small; font-weight: bold; color: red;">*It only accept PDF File</span>
                    </div>
                    <div class="form-group">
                      <label class="control-label fw-bold">Speaker Picture:</label>
                      <input type="file" name="speakerImage" class="form-control form-control" accept="image/*" />
                      <span class="mb-3" style="font-size: small; font-weight: bold; color: red;">*It only accept image</span>
                    </div>
                  </div>
                </div>

              </div>
            </div>
          </div>

        </div>
        <div class="modal-footer">
          <button type="submit" class="btn btn-success">
            Add Speaker
          </button>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="Close">
            Cancel
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- View More Information Modal -->
<div class="modal fade" id="view_more" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="staticBackdropLabel">View More about the Speaker's Information</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="closeButton"></button>
      </div>
      <div class="modal-body">
        <div class="text-center" id="ViewSpeakerLoader">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <div class="" id="View-Speaker">
          <!-- The data from the UserAction will be shown here -->
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Updating Speaker Information Modal -->
<div class="modal fade" id="edit_speaker" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="staticBackdropLabel">Edit Speaker Information</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="closeButton"></button>
      </div>
      <div class="modal-body">
        <div class="text-center" id="EditSpeakerLoader">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <div class="" id="Edit-Speaker">
          <!-- The data from the UserAction will be shown here -->
        </div>
      </div>
      <div class="modal-footer" id="modal-footer-edit">
        <button type="button" class="btn btn-success" id="EditSpeaker" onclick="EditSpeaker('${userID}','${speakerName}')">
          Edit Speaker
        </button>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="Close">
          Cancel
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Deletition of the Speaker Modal -->
<div class="modal fade" id="delete_speaker" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="staticBackdropLabel">Delete Speaker</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="closeButton"></button>
      </div>
      <div class="modal-body">
        <div class="text-center" id="DeleteSpeakerLoader">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <div class="" id="Delete-Speaker">
          <!-- The data from the UserAction will be shown here -->
        </div>
      </div>
      <div class="modal-footer" id="modal-footer">
        <button type="button" class="btn btn-danger" id="DeleteSpeaker" onclick="DeleteSpeaker('${userID}')">
          Delete Speaker
        </button>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="Close">
          Cancel
        </button>
      </div>
    </div>
  </div>
</div>

<div class="menu">
  <div class="menu_box">
    <% speaker.forEach((speaker, i) => { %>
      <div class="menu_card">
        <div class="speakerID"><p style="display: none;">ID: <%= speaker._id %></p></div>
        <div class="menu_image">
          <% if(speaker.speakerImage === null || speaker.speakerImage === ""){ %>
            <img src="/public/speaker/DefaultProfile.jpg" alt="">
          <% } else{  %>
            <img src="/public/speaker/<%= speaker.speakerImage %>">
          <% } %>
        </div>
        <div class="menu_info">
          <h3 class="mt-3 control-label fw-bold" style="text-align: center">
            <%= speaker.speakerName %>
          </h3>
          <p>
            Position: <b><%= speaker.speakerPosition %></b>
          </p>
          <a class="menu_btn view_speaker" data-bs-toggle="modal" data-bs-target="#view_more" data-id="<%= speaker._id %>"><b>View More</b></a>
        </div>
      </div>
    <% }); %>
    <!-- FOR REAL TIME UPDATE -->
    <div id="socketSpeaker"></div>
  </div>
</div>

<!-- FOR REAL TIME UPDATE -->
<script>
  const socket = io("http://localhost:8000");
  socket.on("newSpeaker", (speaker) => {
    // Create a new container div for the news item
    const newSpeakerContainer = document.createElement("div");
    newSpeakerContainer.classList.add("menu_box");
    console.log(speaker._id)

    // Set the inner HTML for the new news item
    newSpeakerContainer.innerHTML = `
        <div class="menu_card">
          <div class="speakerID"><p style="display: none;">ID: ${speaker._id}</p></div>
          <div class="menu_image">
            <img src="${speaker.speakerImage === null || speaker.speakerImage === '' ? '/public/speaker/DefaultProfile.jpg' : `/public/speaker/${speaker.speakerImage}`}" alt="">
          </div>
          <div class="menu_info">
            <h2 class="mt-3 control-label fw-bold" style="text-align: center">
              ${speaker.speakerName}
            </h2>
            <p>
              Position: <b>${speaker.speakerPosition}</b>
            </p>
            <a class="menu_btn view_speaker" data-bs-toggle="modal" data-bs-target="#view_more" data-id="${speaker._id}"><b>View More</b></a>
          </div>
        </div>
      `;

    // Append the new news item container to the container with id "socketTest"
    document.getElementById("socketSpeaker").appendChild(newSpeakerContainer);
  });
</script>

<!-- FOR REAL TIME DELETE -->
<script>
  document.addEventListener("DOMContentLoaded", async function () {
    const socket = io("http://localhost:8000");

    // Listen for the newsDeleted event
    socket.on("speakerDelete", (data) => {
      console.log("Received newsDeleted event:", data);

      const { speakerID } = data;

      // Find and remove the corresponding news item from the user's dashboard
      const speakerItems = document.querySelectorAll('.menu_card'); // Assuming each news item has the class 'news_content'

      speakerItems.forEach((speakerItem) => {
        const speakerItemID = speakerItem.querySelector('.speakerID').textContent.match(/ID: (.+)/)[1];

        if (speakerItemID === speakerID) {
          console.log("Removing news item:", speakerItem);
          speakerItem.remove();
        }
      });
    });
  });
</script>

<script>
  document.addEventListener("DOMContentLoaded", async function() {
    const viewButtons = document.querySelectorAll(".view_speaker");
    viewButtons.forEach(async function(button) {
      button.addEventListener("click", async function() {
        const speakerID = button.getAttribute("data-id");

        //Pass the news ID in the Delete Function
        const DeleteSpeaker = document.getElementById("DeleteSpeaker");
        if (DeleteSpeaker) {
          DeleteSpeaker.setAttribute("onclick", `DeleteSpeaker('${speakerID}')`);
        }

        const deleteBiodata = document.getElementById("deleteBiodata");
        if (deleteBiodata) {
          deleteBiodata.setAttribute("onclick", `deleteBiodata('${speakerID}')`);
        }

        document.getElementById("DeleteSpeakerLoader").style.display = "block";
        document.getElementById("EditSpeakerLoader").style.display = "block";
        document.getElementById("ViewSpeakerLoader").style.display = "block";

        try {
          const response = await fetch(`/action/GetSpeaker/${speakerID}`);
          const data = await response.json();

          document.getElementById("DeleteSpeakerLoader").style.display = "none";
          document.getElementById("EditSpeakerLoader").style.display = "none";
          document.getElementById("ViewSpeakerLoader").style.display = "none";



          // Check if username is available
          const speakerName = data.speakerName || "Speaker Name"; // Use a default value if username is undefined
          const speakerPosition = data.speakerPosition || "Speaker Position";
          const speakerSchool = data.speakerSchool || "Speaker School";
          const speakerDistrict = data.speakerDistrict || "Speaker District";
          const speakerBiodata = data.speakerBiodata;

          const EditSpeaker = document.getElementById("EditSpeaker");
          if (EditSpeaker) {
            EditSpeaker.setAttribute("onclick", `EditSpeaker('${speakerID}','${speakerName}')`);
          }

          document.getElementById("View-Speaker").innerHTML = `
            <div style="font-size:20px;" class="mb-2"><b>More information of: <b style="color:green;">${speakerName} </b></div>

            <div class="col-lg-12 center">
            <div class="card card-outline card-primary">
              <div class="card-body">

                  <div class="row">

                    <div class="col-md-6 border-right">
                      <div class="form-group">
                        <label class="control-label fw-bold">Name:</label>
                        <input type="text" value="${speakerName}" class="form-control form-control mb-3" placeholder="Name of the speaker" disabled />
                      </div>
                      <div class="form-group">
                        <label class="control-label fw-bold">Position:</label>
                        <input type="text" value="${speakerPosition}" class="form-control form-control mb-3" placeholder="Position of the speaker" disabled />
                      </div>
                      <div class="form-group">
                        <label class="control-label fw-bold">School:</label>
                        <input type="text" value="${speakerSchool}" class="form-control form-control mb-3" placeholder="Position of the speaker" disabled />
                      </div>
                    </div>

                    <div class="col-md-6">
                      <div class="form-group">
                        <label class="control-label fw-bold">District:</label>
                        <input type="text" value="${speakerDistrict}" class="form-control form-control mb-3" placeholder="Position of the speaker" disabled />
                      </div>
                      <div class="form-group">
                        <label class="control-label fw-bold">Field of Expertise:</label>
                        <div class="input-group-append">
                          ${speakerBiodata ?
                            `<a href="/public/speaker/${speakerBiodata}" target="_blank" class="form-control btn btn-success"><i class="fa-solid fa-file-pdf"></i> View Expertise</a>` :
                            `<span class="form-control btn btn-secondary">Not Available</span>`
                          }
                        </div>
                      </div>
                    </div>
                  </div>

              </div>
            </div>
          </div>
          `;

          document.getElementById("Edit-Speaker").innerHTML = `
            <div style="font-size:20px;" class="mb-2"><b>Edit This Speaker: <b style="color:green;">${speakerName} </b></div>

            <div class="col-lg-12 center">
            <div class="card card-outline card-primary">
              <div class="card-body">

                  <div class="row">

                    <div class="col-md-6 border-right">
                      <div class="form-group">
                        <label class="control-label fw-bold">Name:</label>
                        <input type="text" id="speakerName" value="${speakerName}" class="form-control form-control mb-3" placeholder="Name of the speaker" required />
                      </div>
                      <div class="form-group">
                        <label class="control-label fw-bold">Position:</label>
                        <input type="text" id="speakerPosition" value="${speakerPosition}" class="form-control form-control mb-3" placeholder="Position of the speaker" required />
                      </div>
                      <div class="form-group">
                        <label class="control-label fw-bold">School:</label>
                        <input type="text" id="speakerSchool" value="${speakerSchool}" class="form-control form-control mb-3" placeholder="Position of the speaker" required />
                      </div>
                    </div>

                    <div class="col-md-6">
                      <div class="form-group">
                        <label class="control-label fw-bold">District:</label>
                        <input type="text" id="speakerDistrict" value="${speakerDistrict}" class="form-control form-control mb-3" placeholder="Position of the speaker" required />
                      </div>
                      <div class="form-group">
                        <label class="control-label fw-bold">Field of Expertise:</label>
                          <div class="input-group">
                            <input type="file" id="speakerBiodata" class="form-control form-control" accept="application/pdf" />
                            ${speakerBiodata ?
                              `<button type="button" class="btn btn-danger input-group-text" id="deleteBiodata" onclick="deleteBiodata('${speakerID}')" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Delete Biodata"><i class="fa-solid fa-trash fa-bounce"></i></button>` :
                              `` }
                          </div>
                        <span class="mb-3" style="font-size: small; font-weight: bold; color: red;">*It only accept PDF File</span>
                      </div>
                      <div class="form-group">
                        <label class="control-label fw-bold">Speaker Picture:</label>
                        <input type="file" id="speakerImage" class="form-control form-control" accept="image/*" />
                        <span class="mb-3" style="font-size: small; font-weight: bold; color: red;">*It only accept image</span>
                      </div>
                    </div>
                  </div>

              </div>
            </div>
          </div>
          `;

          const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
          const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))

          document.getElementById("Delete-Speaker").innerHTML = `
            <div class="text-center" style="font-size:20px;">
                <b>Are you sure you want to delete this speaker: <br> <b style="color:red;"> ${speakerName}</b> ? </br>
            </div>
          `;
        } catch (error) {
          // Hide loading spinner in case of an error
          document.getElementById("DeleteSpeakerLoader").style.display = "none";
          document.getElementById("EditSpeakerLoader").style.display = "none";
          document.getElementById("ViewSpeakerLoader").style.display = "block";
          console.error(error);
        }

      });
    });
    const view_more = new bootstrap.Modal(document.getElementById("view_more"));
    view_more._element.addEventListener('show.bs.modal', function() {
      // Reset modal content and show loading spinner when the modal is about to be shown
      document.getElementById("View-Speaker").innerHTML = "";
      document.getElementById("ViewSpeakerLoader").style.display = "block";
    });

    const edit_speaker = new bootstrap.Modal(document.getElementById("edit_speaker"));
    edit_speaker._element.addEventListener('show.bs.modal', function() {
      // Reset modal content and show loading spinner when the modal is about to be shown
      document.getElementById("Edit-Speaker").innerHTML = "";
      document.getElementById("EditSpeakerLoader").style.display = "block";
    });

    const delete_speaker = new bootstrap.Modal(document.getElementById("delete_speaker"));
    delete_speaker._element.addEventListener('show.bs.modal', function() {
      // Reset modal content and show loading spinner when the modal is about to be shown
      document.getElementById("Delete-Speaker").innerHTML = "";
      document.getElementById("DeleteSpeakerLoader").style.display = "block";
    });
  });

  //Handles the Deletion of news
  async function DeleteSpeaker(speakerID) {
    try {
      const response = await fetch(`/action/DeleteSpeaker/${speakerID}`, {
        method: "DELETE",
      });
      if (response.ok) {
        // Document deleted successfully, refresh the page
        location.reload();
        req.flash("success_msg", "News Deleted Successfully");
      } else {
        console.error("Failed to delete speaker");
      }
    } catch (error) {
      console.error(error);
    }
  }

  async function EditSpeaker(speakerID, speakerName) {

    const speakerNameUpdate = document.getElementById("speakerName").value;
    const speakerPositionUpdate = document.getElementById("speakerPosition").value;
    const speakerSchoolUpdate = document.getElementById("speakerSchool").value;
    const speakerDistrictUpdate = document.getElementById("speakerDistrict").value;

    const speakerBiodata = document.getElementById("speakerBiodata");
    const biodataUpdate = speakerBiodata.files.length > 0 ? speakerBiodata.files[0] : null;

    const speakerImage = document.getElementById("speakerImage");
    const imgUpdate = speakerImage.files.length > 0 ? speakerImage.files[0] : null;

    const updateData = new FormData();
    updateData.append("speakerName", speakerNameUpdate);
    updateData.append("speakerPosition", speakerPositionUpdate);
    updateData.append("speakerSchool", speakerSchoolUpdate);
    updateData.append("speakerDistrict", speakerDistrictUpdate);

    //If the Admin add a New Biodata it updates it
    if (biodataUpdate) {
      updateData.append("speakerBiodata", biodataUpdate);
    }
    //If the Admin add a New Image it updates it
    if (imgUpdate) {
      updateData.append("speakerImage", imgUpdate);
    }

    Swal.fire({
        title: `Do you want to update the information of this speaker: <b style="color:green;"> ${speakerName}</b>?`,
        showCancelButton: true,
        showConfirmButton: true,
        confirmButtonText: "Yes, update it",
        confirmButtonColor: "#198754",
        cancelButtonText: "No, cancel",
        icon: "question",
        dangerMode: true,
      })
      .then(async (willUpdate) => {
        if (willUpdate.isConfirmed) {
          try {
            const response = await fetch(`/action/Edit_Speaker/${speakerID}`, {
              method: "PATCH",
              body: updateData,
            });

            if (!response.ok) {
              throw new Error(`Failed to update document: ${response.statusText}`);
            }

            const contentType = response.headers.get("content-type");
            if (contentType && contentType.includes("application/json")) {
              const responseData = await response.json();
              console.log(responseData);

              // Handle the response data as needed
              location.reload();
            } else {
              // Handle non-JSON response here if needed
              console.error("Server response is not in JSON format");
            }
          } catch (error) {
            console.error(error);
          }
        } else {
          Swal.fire("Update canceled", "", "info");
        }
      });

  }

  async function deleteBiodata(speakerID) {
    Swal.fire({
        title: "Are you sure?",
        text: "You're gonna delete the biodata of this speaker!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#198754",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes, delete it!"
      })
      .then(async (result) => {
        if (result.isConfirmed) {
          try {
            const response = await fetch(`/action/deleteBiodata/${speakerID}`, {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json',
              },
            });

            const data = await response.json();

            if (data.success) {
              // Biodata deleted successfully, you might want to update your UI or take additional actions
              Swal.fire({
                title: "Deleted!",
                text: "Biodata has been deleted.",
                icon: "success"
              }).then(() => {
                location.reload();
              });
            } else {
              // Handle error from the server
              Swal.fire({
                title: "Error!",
                text: data.message,
                icon: "error"
              });
            }
          } catch (error) {
            // Handle network errors or other exceptions
            console.error('Error deleting biodata:', error);
          }
        }
      });
  }
</script>
<%- include('../ui/footer2.ejs') %>