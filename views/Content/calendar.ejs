<%- include('../ui/sidebar2.ejs') %>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title>Calendar of Activities</title>
<link href="https://cdn.jsdelivr.net/npm/fullcalendar/main.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/fullcalendar/main.min.js"></script>

<!-- Bootstrap CSS -->

<style>
  a {
    text-decoration: none;
    color: black;
  }

  #calendar {
    max-width: 1030px;
    margin: 80px auto;
    background: #fff;
    padding: 15px;
  }

  .fc-event {
    margin-bottom: 5px;
    /* Adjust the value as needed */
  }

  .event_list {
    padding: 60px 30px;
    margin-top: 10px;
    margin-bottom: -100px;
  }
</style>

<% if( user.userType == "Admin"){ %>
<div class="col-lg-12 event_list">
  <div class="card card-outline card-primary">
    <div class="card-header">
      <div class="card-tools">
        <!-- <a class="btn btn-block btn-sm btn-default btn-flat border-primary" data-bs-toggle="modal" data-bs-target="#news_content"><i class="fa-solid fa-plus"></i> Add News</a> -->
      </div>
    </div>
    <div class="card-body" style="max-height:550px; overflow-x: auto; overflow-y: auto;">
      <table class="table-hover styled-table table table-bordered commonTable" id="list">
        <h3 class="mb-4 control-label fw-bold text-muted" style="text-align: center">
          Event List
        </h3>
        <%- include('../partials/messages.ejs')%>
        <thead class="table-info">
          <tr>
            <th width="1%" class="text-center">#</th>
            <th width="22%">Event Title</th>
            <th style="text-align: center;" width="3%">Action</th>
          </tr>
        </thead>
        <tbody>
          <% event.forEach((event, i) => { %>
          <tr>
            <td class="text-center">
              <b><%= i + 1 %></b>
            </td>
            <td>
              <b class="truncate">
                <%= event.createTitle %>
              </b>
            </td>

            <td class="text-center">
              <div class="btn-group" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Edit">
                <a class="btn btn-outline-success view_event" data-bs-toggle="modal" data-bs-target="#edit_event" data-id="<%= event._id %>">
                  <i class="fa-solid fa-pen-to-square"></i>
                </a>
              </div>
              <div class="btn-group" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Delete">
                <a class="btn btn-outline-danger view_event" data-bs-toggle="modal" data-bs-target="#delete_event" data-id="<%= event._id %>">
                  <i class="fa-solid fa-trash"></i>
                </a>
              </div>
            </td>
          </tr>
          <% }); %>
        </tbody>
      </table>
    </div>
  </div>
</div>
<% }%>

<div class="container">
  <div id="calendar"></div>
</div>

<!-- Create Event Modal -->
<% if( user.userType == "Admin"){ %>
<div class="modal fade" id="createEventModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="createEventModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="createEventModalLabel">Create Event</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="createEventCloseButton"></button>
      </div>
      <div class="modal-body">
        <form action="/users/addEvent" method="POST">
          <div class="mb-3">
            <label for="createTitle" class="form-label">Title:</label>
            <input type="text" class="form-control" id="createTitle" name="createTitle" placeholder="Event Title" required />
          </div>
          <div class="mb-3">
            <label for="createDetails" class="form-label">Details:</label>
            <textarea class="form-control" id="createDetails" name="createDetails" placeholder="Event Details" required></textarea>
          </div>
          <div class="mb-3">
            <label for="createStart" class="form-label">Start Date:</label>
            <input type="datetime-local" class="form-control" id="createStart" name="createStart" required />
          </div>
          <div class="mb-3">
            <label for="createEnd" class="form-label">End Date:</label>
            <input type="datetime-local" class="form-control" id="createEnd" name="createEnd" min="" max="" required />
          </div>
          <button type="submit" class="btn btn-primary">Save</button>
        </form>
      </div>
    </div>
  </div>
</div>
<% } %>

<!-- View Event Modal -->
<div class="modal fade" id="viewEventModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="viewEventModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="viewEventModalLabel">View Event</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="viewEventCloseButton"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <label for="viewTitle" class="form-label">Title:</label>
          <input type="text" class="form-control" id="viewTitle" disabled />
        </div>
        <div class="mb-3">
          <label for="viewDetails" class="form-label">Details:</label>
          <textarea class="form-control" id="viewDetails" disabled></textarea>
        </div>
        <div class="mb-3">
          <label for="viewStart" class="form-label">Start Date:</label>
          <div id="startInput"></div>
          <input type="text" class="form-control" id="viewStart" disabled />
        </div>
        <div class="mb-3">
          <label for="viewEnd" class="form-label">End Date:</label>
          <div id="endInput"></div>
          <input type="text" class="form-control" id="viewEnd" disabled />
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Edit Event Modal -->
<div class="modal fade" id="edit_event" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="staticBackdropLabel">Edit Event</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="closeButton"></button>
      </div>
      <div class="modal-body">
        <div class="" id="editEvent">
          <!-- The data from the UserAction will be shown here -->
        </div>
      </div>
      <div class="modal-footer" id="modal-footer-edit">
        <button type="button" class="btn btn-success" id="updateEvent" onclick="updateEvent('${eventID}')">
          Edit Event
        </button>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="Close">
          Cancel
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Delete Event Modal -->
<div class="modal fade" id="delete_event" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="staticBackdropLabel">Delete Event</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="closeButton"></button>
      </div>
      <div class="modal-body">

        <div class="" id="deleteEvent">
          <!-- The data from the UserAction will be shown here -->
        </div>
      </div>
      <div class="modal-footer" id="modal-footer">
        <button type="button" class="btn btn-danger" id="deleteEventButton" onclick="deleteEventButton('${eventID}')">
          Delete Event
        </button>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="Close">
          Cancel
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    const calendarEl = document.getElementById("calendar");
    const calendar = new FullCalendar.Calendar(calendarEl, {
      initialView: "dayGridMonth",
      headerToolbar: {
        right: "dayGridWeek,dayGridMonth,listDay today prev,next"
      },
      buttonText: {
        dayGridWeek: "Week",
        dayGridMonth: "Month",
        listDay: "Day",
        listWeek: "Week",
      },
      selectable: true,
      events: [], // Initialize with an empty array of events
      dateClick: function(info) {
        document.getElementById("createStart").value = info.dateStr + "T08:00";
        document.getElementById("createEnd").value = info.dateStr + "T17:00";
        openCreateEventModal();
      },
      eventClick: function(info) {
        const event = info.event;
        const id = info.event.id

        document.getElementById("viewTitle").value = event.title;
        document.getElementById("viewDetails").value =
          event.extendedProps.details || "";

        // Format the start and end dates
        const formattedStartDate = formatDate(event.start);
        const formattedEndDate = event.end ? formatDate(event.end) : "";

        // Set the formatted start and end dates to the input fields
        document.getElementById("viewStart").value = formattedStartDate;
        document.getElementById("viewEnd").value = formattedEndDate;

        const editEventButton = document.getElementById("editEventButton");
        if (editEventButton) {
          editEventButton.setAttribute("onclick", `editEventButton('${id}')`);
        }

        openViewEventModal();
      },
    });

    // Fetch events from the server
    fetch("/action/events")
      .then((response) => response.json())
      .then((events) => {
        // Iterate over each event object in the events array
        events.forEach((eventData) => {
          // Create an event object with the necessary properties
          const event = {
            id: eventData._id,
            title: eventData.createTitle,
            details: eventData.createDetails,
            start: eventData.createStart,
            end: eventData.createEnd,
            // Add other properties as needed
          };
          // Add the event to the calendar
          calendar.addEvent(event);
        });
      })
      .catch((error) => {
        console.error("Error fetching events:", error);
      });

    function formatDate(date) {
      const options = {
        timeZone: "Asia/Manila",
        year: "numeric",
        month: "short",
        day: "numeric",
        hour: "numeric",
        minute: "2-digit",
        hour12: true,
      };
      return new Date(date).toLocaleDateString("en-US", options);
    }

    calendar.render();

    // Open Create Event Modal function
    function openCreateEventModal() {
      const createEventModal = new bootstrap.Modal(
        document.getElementById("createEventModal")
      );
      createEventModal.show();
    }

    // Open View Event Modal function
    function openViewEventModal() {
      const viewEventModal = new bootstrap.Modal(
        document.getElementById("viewEventModal")
      );
      viewEventModal.show();
    }
  });
</script>

<script>
  document.addEventListener("DOMContentLoaded", async function() {
    const viewButtons = document.querySelectorAll(".view_event");
    viewButtons.forEach(async function(button) {
      button.addEventListener("click", async function() {
        const eventID = button.getAttribute("data-id");

        const updateEvent = document.getElementById("updateEvent");
        if (updateEvent) {
          updateEvent.setAttribute("onclick", `updateEvent('${eventID}')`);
        }

        const deleteEventButton = document.getElementById("deleteEventButton");
        if (deleteEventButton) {
          deleteEventButton.setAttribute("onclick", `deleteEventButton('${eventID}')`);
        }

        try {
          const response = await fetch(`/action/getEvent/${eventID}`);
          const data = await response.json();

          const {
            createTitle,
            createDetails,
            createStart,
            createEnd
          } = data;

          document.getElementById("editEvent").innerHTML = `
          <div class="mb-3">
            <label for="createTitle" class="form-label">Title:</label>
            <input type="text" class="form-control" id="updateTitle" placeholder="Event Title" value="${createTitle}" />
          </div>
          <div class="mb-3">
            <label for="createDetails" class="form-label">Details:</label>
            <textarea class="form-control" id="updateDetails" placeholder="Event Details">${createDetails}</textarea>
          </div>
          <div class="mb-3">
            <label for="createStart" class="form-label">Start Date:</label>
            <input type="datetime-local" class="form-control" id="updateStart" value="${createStart}" />
          </div>
          <div class="mb-3">
            <label for="createEnd" class="form-label">End Date:</label>
            <input type="datetime-local" class="form-control" id="updateEnd" value="${createEnd}"  />
          </div>
        `;

          document.getElementById("deleteEvent").innerHTML = `
          <div class="text-center" style="font-size:20px;">
              <b>Are you sure you want to delete this event: <br> <b style="color:red;">${createTitle}</b> ? </br>
          </div>
        `;
        } catch (error) {

          console.error(error);
        }

      });
    });
  });

  function updateEvent(eventID) {

    const updateTitle = document.getElementById("updateTitle").value;
    const updateDetails = document.getElementById("updateDetails").value;
    const updateStart = document.getElementById("updateStart").value;
    const updateEnd = document.getElementById("updateEnd").value;

    const updateData = {
      createTitle: updateTitle,
      createDetails: updateDetails,
      createStart: updateStart,
      createEnd: updateEnd
    }
    Swal.fire({
        title: "Are you sure you want to update this event?",
        showCancelButton: true,
        showConfirmButton: true,
        confirmButtonText: "Yes, update it",
        confirmButtonColor: "#198754",
        cancelButtonText: "No, cancel",
        icon: "question",
        dangerMode: true,
      })
      .then(async (willUpdate) => {
        if (willUpdate.isConfirmed) {
          try {
            const response = await fetch(`/action/editEvent/${eventID}`, {
              method: "PATCH",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(updateData), // Use FormData directly instead of JSON.stringify
            });

            if (!response.ok) {
              throw new Error(`Failed to update document: ${response.statusText}`);
            }

            const contentType = response.headers.get("content-type");
            if (contentType && contentType.includes("application/json")) {
              const responseData = await response.json();

              // Handle the response data as needed
              location.reload();
            } else {
              // Handle non-JSON response here if needed
              console.error("Server response is not in JSON format");
            }
          } catch (error) {
            console.error(error);
          }
        } else {
          Swal.fire("Update canceled", "", "info");
        }
      });
  }

  async function deleteEventButton(eventID) {
    try {
      const response = await fetch(`/action/deleteEvent/${eventID}`, {
        method: "DELETE",
      });
      if (response.ok) {
        // Document deleted successfully, refresh the page
        location.reload();
        req.flash("success_msg", "News Deleted Successfully");
      } else {
        console.error("Failed to delete news");
      }
    } catch (error) {
      console.error(error);
    }
  }
</script>
<%- include('../ui/footer2.ejs') %>